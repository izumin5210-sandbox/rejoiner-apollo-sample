// Code generated by protoc-gen-go. DO NOT EDIT.
// source: repository.proto

package github_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListRepositoryRequest struct {
	// Required. User ID.
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRepositoryRequest) Reset()         { *m = ListRepositoryRequest{} }
func (m *ListRepositoryRequest) String() string { return proto.CompactTextString(m) }
func (*ListRepositoryRequest) ProtoMessage()    {}
func (*ListRepositoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d86afa5a89ec9d, []int{0}
}

func (m *ListRepositoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoryRequest.Unmarshal(m, b)
}
func (m *ListRepositoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoryRequest.Marshal(b, m, deterministic)
}
func (m *ListRepositoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoryRequest.Merge(m, src)
}
func (m *ListRepositoryRequest) XXX_Size() int {
	return xxx_messageInfo_ListRepositoryRequest.Size(m)
}
func (m *ListRepositoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoryRequest proto.InternalMessageInfo

func (m *ListRepositoryRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

type Repository struct {
	Id                 int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId             string                    `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Owner              *User                     `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	Name               string                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	FullName           string                    `protobuf:"bytes,5,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Description        string                    `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Homepage           string                    `protobuf:"bytes,7,opt,name=homepage,proto3" json:"homepage,omitempty"`
	CodeOfConduct      *Repository_CodeOfConduct `protobuf:"bytes,8,opt,name=code_of_conduct,json=codeOfConduct,proto3" json:"code_of_conduct,omitempty"`
	DefaultBranch      string                    `protobuf:"bytes,9,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	MasterBranch       string                    `protobuf:"bytes,10,opt,name=master_branch,json=masterBranch,proto3" json:"master_branch,omitempty"`
	CreatedAt          *timestamp.Timestamp      `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	PushedAt           *timestamp.Timestamp      `protobuf:"bytes,12,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	UpdatedAt          *timestamp.Timestamp      `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	HtmlUrl            string                    `protobuf:"bytes,14,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	CloneUrl           string                    `protobuf:"bytes,15,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	GitUrl             string                    `protobuf:"bytes,16,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	MirrorUrl          string                    `protobuf:"bytes,17,opt,name=mirror_url,json=mirrorUrl,proto3" json:"mirror_url,omitempty"`
	SshUrl             string                    `protobuf:"bytes,18,opt,name=ssh_url,json=sshUrl,proto3" json:"ssh_url,omitempty"`
	SvnUrl             string                    `protobuf:"bytes,19,opt,name=svn_url,json=svnUrl,proto3" json:"svn_url,omitempty"`
	Language           string                    `protobuf:"bytes,20,opt,name=language,proto3" json:"language,omitempty"`
	Fork               bool                      `protobuf:"varint,21,opt,name=fork,proto3" json:"fork,omitempty"`
	ForksCount         uint32                    `protobuf:"varint,22,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	NetworkCount       uint32                    `protobuf:"varint,23,opt,name=network_count,json=networkCount,proto3" json:"network_count,omitempty"`
	OpenissuesCount    uint32                    `protobuf:"varint,24,opt,name=openissues_count,json=openissuesCount,proto3" json:"openissues_count,omitempty"`
	StargazersCount    uint32                    `protobuf:"varint,25,opt,name=stargazers_count,json=stargazersCount,proto3" json:"stargazers_count,omitempty"`
	SubscribersCount   uint32                    `protobuf:"varint,26,opt,name=subscribers_count,json=subscribersCount,proto3" json:"subscribers_count,omitempty"`
	WatchersCount      uint32                    `protobuf:"varint,27,opt,name=watchers_count,json=watchersCount,proto3" json:"watchers_count,omitempty"`
	Size               uint32                    `protobuf:"varint,28,opt,name=size,proto3" json:"size,omitempty"`
	AutoInit           bool                      `protobuf:"varint,29,opt,name=auto_init,json=autoInit,proto3" json:"auto_init,omitempty"`
	Parent             *Repository               `protobuf:"bytes,30,opt,name=parent,proto3" json:"parent,omitempty"`
	Source             *Repository               `protobuf:"bytes,31,opt,name=source,proto3" json:"source,omitempty"`
	TemplateRepository *Repository               `protobuf:"bytes,32,opt,name=template_repository,json=templateRepository,proto3" json:"template_repository,omitempty"`
	Organization       *Organization             `protobuf:"bytes,33,opt,name=organization,proto3" json:"organization,omitempty"`
	Permissions        map[string]bool           `protobuf:"bytes,34,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AllowRebaseMerge   bool                      `protobuf:"varint,35,opt,name=allow_rebase_merge,json=allowRebaseMerge,proto3" json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge   bool                      `protobuf:"varint,36,opt,name=allow_squash_merge,json=allowSquashMerge,proto3" json:"allow_squash_merge,omitempty"`
	AllowMergeCommit   bool                      `protobuf:"varint,37,opt,name=allow_merge_commit,json=allowMergeCommit,proto3" json:"allow_merge_commit,omitempty"`
	Topics             []string                  `protobuf:"bytes,38,rep,name=topics,proto3" json:"topics,omitempty"`
	Archived           bool                      `protobuf:"varint,39,opt,name=archived,proto3" json:"archived,omitempty"`
	Disabled           bool                      `protobuf:"varint,40,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Only provided when using RepositoriesService.Get while in preview
	License *Repository_License `protobuf:"bytes,41,opt,name=license,proto3" json:"license,omitempty"`
	// Additional mutable fields when creating and editing a repository
	Private           bool   `protobuf:"varint,42,opt,name=private,proto3" json:"private,omitempty"`
	HasIssues         bool   `protobuf:"varint,43,opt,name=has_issues,json=hasIssues,proto3" json:"has_issues,omitempty"`
	HasWiki           bool   `protobuf:"varint,44,opt,name=has_wiki,json=hasWiki,proto3" json:"has_wiki,omitempty"`
	HasPages          bool   `protobuf:"varint,45,opt,name=has_pages,json=hasPages,proto3" json:"has_pages,omitempty"`
	HasProjects       bool   `protobuf:"varint,46,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects,omitempty"`
	HasDownloads      bool   `protobuf:"varint,47,opt,name=has_downloads,json=hasDownloads,proto3" json:"has_downloads,omitempty"`
	IsTemplate        bool   `protobuf:"varint,48,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	LicenseTemplate   string `protobuf:"bytes,49,opt,name=license_template,json=licenseTemplate,proto3" json:"license_template,omitempty"`
	GitignoreTemplate string `protobuf:"bytes,50,opt,name=gitignore_template,json=gitignoreTemplate,proto3" json:"gitignore_template,omitempty"`
	// Creating an organization repository. Required for non-owners.
	TeamId               int64    `protobuf:"varint,51,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d86afa5a89ec9d, []int{1}
}

func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (m *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(m, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Repository) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Repository) GetOwner() *User {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Repository) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Repository) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *Repository) GetCodeOfConduct() *Repository_CodeOfConduct {
	if m != nil {
		return m.CodeOfConduct
	}
	return nil
}

func (m *Repository) GetDefaultBranch() string {
	if m != nil {
		return m.DefaultBranch
	}
	return ""
}

func (m *Repository) GetMasterBranch() string {
	if m != nil {
		return m.MasterBranch
	}
	return ""
}

func (m *Repository) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Repository) GetPushedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PushedAt
	}
	return nil
}

func (m *Repository) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Repository) GetHtmlUrl() string {
	if m != nil {
		return m.HtmlUrl
	}
	return ""
}

func (m *Repository) GetCloneUrl() string {
	if m != nil {
		return m.CloneUrl
	}
	return ""
}

func (m *Repository) GetGitUrl() string {
	if m != nil {
		return m.GitUrl
	}
	return ""
}

func (m *Repository) GetMirrorUrl() string {
	if m != nil {
		return m.MirrorUrl
	}
	return ""
}

func (m *Repository) GetSshUrl() string {
	if m != nil {
		return m.SshUrl
	}
	return ""
}

func (m *Repository) GetSvnUrl() string {
	if m != nil {
		return m.SvnUrl
	}
	return ""
}

func (m *Repository) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Repository) GetFork() bool {
	if m != nil {
		return m.Fork
	}
	return false
}

func (m *Repository) GetForksCount() uint32 {
	if m != nil {
		return m.ForksCount
	}
	return 0
}

func (m *Repository) GetNetworkCount() uint32 {
	if m != nil {
		return m.NetworkCount
	}
	return 0
}

func (m *Repository) GetOpenissuesCount() uint32 {
	if m != nil {
		return m.OpenissuesCount
	}
	return 0
}

func (m *Repository) GetStargazersCount() uint32 {
	if m != nil {
		return m.StargazersCount
	}
	return 0
}

func (m *Repository) GetSubscribersCount() uint32 {
	if m != nil {
		return m.SubscribersCount
	}
	return 0
}

func (m *Repository) GetWatchersCount() uint32 {
	if m != nil {
		return m.WatchersCount
	}
	return 0
}

func (m *Repository) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Repository) GetAutoInit() bool {
	if m != nil {
		return m.AutoInit
	}
	return false
}

func (m *Repository) GetParent() *Repository {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Repository) GetSource() *Repository {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *Repository) GetTemplateRepository() *Repository {
	if m != nil {
		return m.TemplateRepository
	}
	return nil
}

func (m *Repository) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *Repository) GetPermissions() map[string]bool {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Repository) GetAllowRebaseMerge() bool {
	if m != nil {
		return m.AllowRebaseMerge
	}
	return false
}

func (m *Repository) GetAllowSquashMerge() bool {
	if m != nil {
		return m.AllowSquashMerge
	}
	return false
}

func (m *Repository) GetAllowMergeCommit() bool {
	if m != nil {
		return m.AllowMergeCommit
	}
	return false
}

func (m *Repository) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Repository) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Repository) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *Repository) GetLicense() *Repository_License {
	if m != nil {
		return m.License
	}
	return nil
}

func (m *Repository) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Repository) GetHasIssues() bool {
	if m != nil {
		return m.HasIssues
	}
	return false
}

func (m *Repository) GetHasWiki() bool {
	if m != nil {
		return m.HasWiki
	}
	return false
}

func (m *Repository) GetHasPages() bool {
	if m != nil {
		return m.HasPages
	}
	return false
}

func (m *Repository) GetHasProjects() bool {
	if m != nil {
		return m.HasProjects
	}
	return false
}

func (m *Repository) GetHasDownloads() bool {
	if m != nil {
		return m.HasDownloads
	}
	return false
}

func (m *Repository) GetIsTemplate() bool {
	if m != nil {
		return m.IsTemplate
	}
	return false
}

func (m *Repository) GetLicenseTemplate() string {
	if m != nil {
		return m.LicenseTemplate
	}
	return ""
}

func (m *Repository) GetGitignoreTemplate() string {
	if m != nil {
		return m.GitignoreTemplate
	}
	return ""
}

func (m *Repository) GetTeamId() int64 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

type Repository_CodeOfConduct struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	URL                  string   `protobuf:"bytes,3,opt,name=uRL,proto3" json:"uRL,omitempty"`
	Body                 string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository_CodeOfConduct) Reset()         { *m = Repository_CodeOfConduct{} }
func (m *Repository_CodeOfConduct) String() string { return proto.CompactTextString(m) }
func (*Repository_CodeOfConduct) ProtoMessage()    {}
func (*Repository_CodeOfConduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d86afa5a89ec9d, []int{1, 1}
}

func (m *Repository_CodeOfConduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository_CodeOfConduct.Unmarshal(m, b)
}
func (m *Repository_CodeOfConduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository_CodeOfConduct.Marshal(b, m, deterministic)
}
func (m *Repository_CodeOfConduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository_CodeOfConduct.Merge(m, src)
}
func (m *Repository_CodeOfConduct) XXX_Size() int {
	return xxx_messageInfo_Repository_CodeOfConduct.Size(m)
}
func (m *Repository_CodeOfConduct) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository_CodeOfConduct.DiscardUnknown(m)
}

var xxx_messageInfo_Repository_CodeOfConduct proto.InternalMessageInfo

func (m *Repository_CodeOfConduct) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository_CodeOfConduct) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Repository_CodeOfConduct) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Repository_CodeOfConduct) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Repository_License struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	SpdxId               string   `protobuf:"bytes,4,opt,name=spdx_id,json=spdxId,proto3" json:"spdx_id,omitempty"`
	HtmlUrl              string   `protobuf:"bytes,5,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	Featured             bool     `protobuf:"varint,6,opt,name=featured,proto3" json:"featured,omitempty"`
	Description          string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Implementation       string   `protobuf:"bytes,8,opt,name=implementation,proto3" json:"implementation,omitempty"`
	Permissions          []string `protobuf:"bytes,9,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Conditions           []string `protobuf:"bytes,10,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Limitations          []string `protobuf:"bytes,11,rep,name=limitations,proto3" json:"limitations,omitempty"`
	Body                 string   `protobuf:"bytes,12,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Repository_License) Reset()         { *m = Repository_License{} }
func (m *Repository_License) String() string { return proto.CompactTextString(m) }
func (*Repository_License) ProtoMessage()    {}
func (*Repository_License) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d86afa5a89ec9d, []int{1, 2}
}

func (m *Repository_License) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository_License.Unmarshal(m, b)
}
func (m *Repository_License) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository_License.Marshal(b, m, deterministic)
}
func (m *Repository_License) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository_License.Merge(m, src)
}
func (m *Repository_License) XXX_Size() int {
	return xxx_messageInfo_Repository_License.Size(m)
}
func (m *Repository_License) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository_License.DiscardUnknown(m)
}

var xxx_messageInfo_Repository_License proto.InternalMessageInfo

func (m *Repository_License) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Repository_License) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Repository_License) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Repository_License) GetSpdxId() string {
	if m != nil {
		return m.SpdxId
	}
	return ""
}

func (m *Repository_License) GetHtmlUrl() string {
	if m != nil {
		return m.HtmlUrl
	}
	return ""
}

func (m *Repository_License) GetFeatured() bool {
	if m != nil {
		return m.Featured
	}
	return false
}

func (m *Repository_License) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Repository_License) GetImplementation() string {
	if m != nil {
		return m.Implementation
	}
	return ""
}

func (m *Repository_License) GetPermissions() []string {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *Repository_License) GetConditions() []string {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *Repository_License) GetLimitations() []string {
	if m != nil {
		return m.Limitations
	}
	return nil
}

func (m *Repository_License) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type ListRepositoryResponse struct {
	Repositories         []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListRepositoryResponse) Reset()         { *m = ListRepositoryResponse{} }
func (m *ListRepositoryResponse) String() string { return proto.CompactTextString(m) }
func (*ListRepositoryResponse) ProtoMessage()    {}
func (*ListRepositoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d86afa5a89ec9d, []int{2}
}

func (m *ListRepositoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRepositoryResponse.Unmarshal(m, b)
}
func (m *ListRepositoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRepositoryResponse.Marshal(b, m, deterministic)
}
func (m *ListRepositoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRepositoryResponse.Merge(m, src)
}
func (m *ListRepositoryResponse) XXX_Size() int {
	return xxx_messageInfo_ListRepositoryResponse.Size(m)
}
func (m *ListRepositoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRepositoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRepositoryResponse proto.InternalMessageInfo

func (m *ListRepositoryResponse) GetRepositories() []*Repository {
	if m != nil {
		return m.Repositories
	}
	return nil
}

func init() {
	proto.RegisterType((*ListRepositoryRequest)(nil), "github.ListRepositoryRequest")
	proto.RegisterType((*Repository)(nil), "github.Repository")
	proto.RegisterMapType((map[string]bool)(nil), "github.Repository.PermissionsEntry")
	proto.RegisterType((*Repository_CodeOfConduct)(nil), "github.Repository.CodeOfConduct")
	proto.RegisterType((*Repository_License)(nil), "github.Repository.License")
	proto.RegisterType((*ListRepositoryResponse)(nil), "github.ListRepositoryResponse")
}

func init() { proto.RegisterFile("repository.proto", fileDescriptor_10d86afa5a89ec9d) }

var fileDescriptor_10d86afa5a89ec9d = []byte{
	// 1307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x96, 0x6b, 0x6f, 0xdb, 0x36,
	0x17, 0xc7, 0x1f, 0xe7, 0x66, 0xfb, 0xd8, 0x49, 0x1c, 0xf6, 0x12, 0xd6, 0x7d, 0xd2, 0xba, 0xe9,
	0xda, 0xa5, 0x97, 0xd8, 0x6d, 0xba, 0x4b, 0xb7, 0x01, 0x03, 0xda, 0xac, 0xc0, 0x02, 0x64, 0x6b,
	0xa6, 0xb6, 0x18, 0xb0, 0xbd, 0x10, 0x68, 0x89, 0xb6, 0xd8, 0x48, 0xa2, 0x4a, 0x52, 0x49, 0x93,
	0xaf, 0xb9, 0xef, 0xb1, 0xcf, 0x30, 0xf0, 0x50, 0xb2, 0xe4, 0x34, 0x45, 0x5f, 0x59, 0xe7, 0xff,
	0xff, 0x1d, 0x92, 0xe6, 0xe5, 0x90, 0xd0, 0x53, 0x3c, 0x93, 0x5a, 0x18, 0xa9, 0xce, 0x86, 0x99,
	0x92, 0x46, 0x92, 0x95, 0xa9, 0x30, 0x51, 0x3e, 0xee, 0xdf, 0x9e, 0x4a, 0x39, 0x8d, 0xf9, 0x08,
	0xd5, 0x71, 0x3e, 0x19, 0x19, 0x91, 0x70, 0x6d, 0x58, 0x92, 0x39, 0xb0, 0x7f, 0xc3, 0x81, 0x23,
	0xa9, 0xa6, 0x2c, 0x15, 0xe7, 0xcc, 0x08, 0x99, 0x16, 0xd6, 0x46, 0x61, 0xe5, 0x9a, 0x2b, 0x27,
	0x6d, 0xef, 0xc2, 0xb5, 0x43, 0xa1, 0x8d, 0x37, 0xeb, 0xce, 0xe3, 0x1f, 0x72, 0xae, 0x0d, 0xb9,
	0x0a, 0xcb, 0xb1, 0x9c, 0x8a, 0x94, 0x36, 0x06, 0x8d, 0x9d, 0xb6, 0xe7, 0x82, 0xed, 0x7f, 0x09,
	0x40, 0xc5, 0x92, 0x35, 0x58, 0x10, 0x21, 0x12, 0x8b, 0xde, 0x82, 0x08, 0xc9, 0x26, 0x34, 0x53,
	0x19, 0x72, 0x5f, 0x84, 0x74, 0x01, 0xd3, 0x56, 0x6c, 0x78, 0x10, 0x92, 0x6d, 0x58, 0x96, 0xa7,
	0x29, 0x57, 0x74, 0x71, 0xd0, 0xd8, 0xe9, 0xec, 0x75, 0x87, 0x6e, 0x24, 0xc3, 0x77, 0x9a, 0x2b,
	0xcf, 0x59, 0x84, 0xc0, 0x52, 0xca, 0x12, 0x4e, 0x97, 0x30, 0x13, 0xbf, 0xc9, 0x4d, 0x68, 0x4f,
	0xf2, 0x38, 0xf6, 0xd1, 0x58, 0x46, 0xa3, 0x65, 0x85, 0xdf, 0xad, 0x39, 0x80, 0x4e, 0xc8, 0x75,
	0xa0, 0x44, 0x66, 0xff, 0x23, 0x5d, 0x41, 0xbb, 0x2e, 0x91, 0x3e, 0xb4, 0x22, 0x99, 0xf0, 0x8c,
	0x4d, 0x39, 0x6d, 0xba, 0xec, 0x32, 0x26, 0xbf, 0xc2, 0x7a, 0x60, 0xc7, 0x2a, 0x27, 0x7e, 0x20,
	0xd3, 0x30, 0x0f, 0x0c, 0x6d, 0xe1, 0xe0, 0x06, 0xe5, 0xe0, 0xaa, 0x3f, 0x3a, 0xdc, 0x97, 0x21,
	0x7f, 0x3d, 0xd9, 0x77, 0x9c, 0xb7, 0x1a, 0xd4, 0x43, 0x72, 0x0f, 0xd6, 0x42, 0x3e, 0x61, 0x79,
	0x6c, 0xfc, 0xb1, 0x62, 0x69, 0x10, 0xd1, 0x36, 0xf6, 0xb5, 0x5a, 0xa8, 0x2f, 0x51, 0x24, 0x77,
	0x61, 0x35, 0x61, 0xda, 0x70, 0x55, 0x52, 0x80, 0x54, 0xd7, 0x89, 0x05, 0xf4, 0x03, 0x40, 0xa0,
	0x38, 0x33, 0x3c, 0xf4, 0x99, 0xa1, 0x1d, 0x1c, 0x50, 0x7f, 0xe8, 0xd6, 0x7c, 0x58, 0xae, 0xf9,
	0xf0, 0x6d, 0xb9, 0xe6, 0x5e, 0xbb, 0xa0, 0x5f, 0x18, 0xf2, 0x3d, 0xb4, 0xb3, 0x5c, 0x47, 0x2e,
	0xb3, 0xfb, 0xc5, 0xcc, 0x96, 0x83, 0x5f, 0x18, 0xdb, 0x67, 0x9e, 0x85, 0x65, 0x9f, 0xab, 0x5f,
	0xee, 0xb3, 0xa0, 0x5f, 0x18, 0x72, 0x03, 0x5a, 0x91, 0x49, 0x62, 0x3f, 0x57, 0x31, 0x5d, 0xc3,
	0xbf, 0xd3, 0xb4, 0xf1, 0x3b, 0x15, 0xdb, 0xa5, 0x0b, 0x62, 0x99, 0x72, 0xf4, 0xd6, 0xdd, 0xe4,
	0xa3, 0x60, 0xcd, 0x4d, 0x68, 0x4e, 0x85, 0x41, 0xab, 0xe7, 0x36, 0xca, 0x54, 0x18, 0x6b, 0x6c,
	0x01, 0x24, 0x42, 0x29, 0xa9, 0xd0, 0xdb, 0x40, 0xaf, 0xed, 0x94, 0x22, 0x4f, 0xeb, 0x08, 0x3d,
	0xe2, 0xf2, 0xb4, 0x8e, 0x4a, 0xe3, 0x24, 0x45, 0xe3, 0x4a, 0x61, 0x9c, 0xa4, 0xd6, 0xe8, 0x43,
	0x2b, 0x66, 0xe9, 0x34, 0xb7, 0x5b, 0xe0, 0xaa, 0x1b, 0x45, 0x19, 0xdb, 0x1d, 0x37, 0x91, 0xea,
	0x98, 0x5e, 0x1b, 0x34, 0x76, 0x5a, 0x1e, 0x7e, 0x93, 0xdb, 0xd0, 0xb1, 0xbf, 0xda, 0x0f, 0x64,
	0x9e, 0x1a, 0x7a, 0x7d, 0xd0, 0xd8, 0x59, 0xf5, 0x00, 0xa5, 0x7d, 0xab, 0xd8, 0x65, 0x4c, 0xb9,
	0x39, 0x95, 0xea, 0xb8, 0x40, 0x36, 0x11, 0xe9, 0x16, 0xa2, 0x83, 0x1e, 0x40, 0x4f, 0x66, 0x3c,
	0x15, 0x5a, 0xe7, 0xbc, 0x6c, 0x8a, 0x22, 0xb7, 0x5e, 0xe9, 0x33, 0x54, 0x1b, 0xa6, 0xa6, 0xec,
	0x9c, 0xab, 0x12, 0xbd, 0xe1, 0xd0, 0x4a, 0x77, 0xe8, 0x23, 0xd8, 0xd0, 0xf9, 0xd8, 0x6e, 0xef,
	0x71, 0xc5, 0xf6, 0x91, 0xed, 0xd5, 0x0c, 0x07, 0xdf, 0x83, 0xb5, 0x53, 0x66, 0x82, 0xa8, 0x22,
	0x6f, 0x22, 0xb9, 0x5a, 0xaa, 0x0e, 0x23, 0xb0, 0xa4, 0xc5, 0x39, 0xa7, 0xff, 0x47, 0x13, 0xbf,
	0xed, 0xd2, 0xb1, 0xdc, 0x48, 0x5f, 0xa4, 0xc2, 0xd0, 0x2d, 0x9c, 0x9c, 0x96, 0x15, 0x0e, 0x52,
	0x61, 0xc8, 0x43, 0x58, 0xc9, 0x98, 0xe2, 0xa9, 0xa1, 0xb7, 0x70, 0xa7, 0x90, 0x4f, 0x8f, 0x8b,
	0x57, 0x10, 0x96, 0xd5, 0x32, 0x57, 0x01, 0xa7, 0xb7, 0x3f, 0xcf, 0x3a, 0x82, 0xec, 0xc3, 0x15,
	0xc3, 0x93, 0x2c, 0x66, 0x86, 0xfb, 0x55, 0xf5, 0xa3, 0x83, 0xcf, 0x26, 0x92, 0x12, 0xaf, 0x15,
	0xa4, 0xe7, 0xd0, 0xad, 0xd7, 0x3d, 0x7a, 0x07, 0xb3, 0xaf, 0x96, 0xd9, 0xaf, 0x6b, 0x9e, 0x37,
	0x47, 0x92, 0x57, 0xd0, 0xc9, 0xb8, 0x4a, 0x84, 0xd6, 0x42, 0xa6, 0x9a, 0x6e, 0x0f, 0x16, 0x77,
	0x3a, 0x7b, 0x77, 0x2f, 0x29, 0x05, 0x47, 0x15, 0xf5, 0x2a, 0x35, 0xea, 0xcc, 0xab, 0xe7, 0x91,
	0xc7, 0x40, 0x58, 0x1c, 0xcb, 0x53, 0x5f, 0xf1, 0x31, 0xd3, 0xdc, 0x4f, 0xb8, 0x9a, 0x72, 0x7a,
	0x17, 0xe7, 0xb0, 0x87, 0x8e, 0x87, 0xc6, 0x6f, 0x56, 0xaf, 0x68, 0xfd, 0x21, 0x67, 0x3a, 0x2a,
	0xe8, 0xaf, 0x6a, 0xf4, 0x1b, 0x34, 0x2e, 0xd0, 0x88, 0xf9, 0x81, 0x4c, 0x12, 0x61, 0xe8, 0xbd,
	0x1a, 0x8d, 0xdc, 0x3e, 0xea, 0xe4, 0x3a, 0xac, 0x18, 0x99, 0x89, 0x40, 0xd3, 0xfb, 0x83, 0x45,
	0x7b, 0x20, 0x5c, 0x64, 0x0f, 0x04, 0x53, 0x41, 0x24, 0x4e, 0x78, 0x48, 0xbf, 0x2e, 0xd6, 0xb6,
	0x88, 0xad, 0x17, 0x0a, 0xcd, 0xc6, 0x31, 0x0f, 0xe9, 0x8e, 0xf3, 0xca, 0x98, 0x7c, 0x03, 0xcd,
	0x58, 0x04, 0x3c, 0xd5, 0x9c, 0x3e, 0x28, 0x4b, 0xc4, 0x27, 0x93, 0x73, 0xe8, 0x08, 0xaf, 0x44,
	0x09, 0x85, 0x66, 0xa6, 0xc4, 0x09, 0x33, 0x9c, 0x3e, 0xc4, 0x06, 0xcb, 0xd0, 0x9e, 0xf4, 0x88,
	0x69, 0xdf, 0x1d, 0x05, 0xfa, 0x08, 0xcd, 0x76, 0xc4, 0xf4, 0x01, 0x0a, 0x58, 0x59, 0x98, 0xf6,
	0x4f, 0xc5, 0xb1, 0xa0, 0x8f, 0x5d, 0x66, 0xc4, 0xf4, 0x9f, 0xe2, 0x58, 0xd8, 0xed, 0x69, 0x2d,
	0x5b, 0xc5, 0x35, 0xdd, 0x75, 0xc3, 0x8c, 0x98, 0x3e, 0xb2, 0x31, 0xb9, 0x03, 0x5d, 0x34, 0x95,
	0x7c, 0xcf, 0x03, 0xa3, 0xe9, 0x10, 0xfd, 0x8e, 0xf5, 0x0b, 0xc9, 0x9e, 0x60, 0x8b, 0x84, 0xf2,
	0x34, 0x8d, 0x25, 0x0b, 0x35, 0x1d, 0x21, 0x63, 0xf3, 0x7e, 0x29, 0x35, 0x5b, 0x07, 0x84, 0xf6,
	0xcb, 0x2d, 0x46, 0x9f, 0x20, 0x02, 0x42, 0xbf, 0x2d, 0x14, 0x7b, 0x6e, 0x8b, 0x3f, 0x59, 0x51,
	0x4f, 0xb1, 0xc0, 0xac, 0x17, 0xfa, 0x0c, 0xdd, 0x05, 0x32, 0x15, 0x46, 0x4c, 0x53, 0xa9, 0x6a,
	0xf0, 0x1e, 0xc2, 0x1b, 0x33, 0x67, 0x86, 0x6f, 0x42, 0xd3, 0x70, 0x96, 0xd8, 0x5b, 0xf4, 0x19,
	0x5e, 0xad, 0x2b, 0x36, 0x3c, 0x08, 0xfb, 0x3f, 0x43, 0xef, 0xe2, 0xee, 0x23, 0x3d, 0x58, 0x3c,
	0xe6, 0x67, 0xc5, 0x2d, 0x6d, 0x3f, 0xed, 0xcd, 0x7d, 0xc2, 0xe2, 0x9c, 0xe3, 0x15, 0xdc, 0xf2,
	0x5c, 0xf0, 0xe3, 0xc2, 0xf3, 0x46, 0xff, 0x6f, 0x58, 0x9d, 0xbb, 0xc8, 0x66, 0x57, 0x6e, 0xa3,
	0x76, 0xe5, 0x16, 0x0d, 0x2e, 0x54, 0x0d, 0xf6, 0x60, 0x31, 0xf7, 0x0e, 0xf1, 0xea, 0x6e, 0x7b,
	0xf6, 0xd3, 0xe6, 0x8d, 0x65, 0x78, 0x56, 0x5e, 0xd5, 0xf6, 0xbb, 0xff, 0xcf, 0x02, 0x34, 0x8b,
	0xe5, 0xbf, 0x64, 0x50, 0x65, 0x4f, 0x0b, 0xf3, 0x3d, 0xd9, 0x7a, 0x5d, 0xb6, 0x5b, 0x54, 0xf1,
	0x2c, 0xfc, 0x68, 0xff, 0xf9, 0x52, 0x51, 0xc5, 0xb3, 0xf0, 0xe3, 0x41, 0x38, 0x77, 0xcf, 0x2c,
	0xcf, 0xdf, 0x33, 0x7d, 0x68, 0x4d, 0x38, 0x33, 0xb9, 0xe2, 0x21, 0x3e, 0x01, 0x5a, 0xde, 0x2c,
	0xbe, 0xf8, 0x42, 0x68, 0x7e, 0xfa, 0x42, 0xb8, 0x0f, 0x6b, 0x22, 0xc9, 0x62, 0x9e, 0xf0, 0xd4,
	0xb8, 0x92, 0xd1, 0x42, 0xe8, 0x82, 0x6a, 0x5b, 0xaa, 0x97, 0x87, 0x36, 0x1e, 0xa9, 0xb9, 0x93,
	0x7f, 0x0b, 0xc0, 0xbe, 0x23, 0x84, 0x41, 0x00, 0x10, 0xa8, 0x29, 0xb6, 0x85, 0x58, 0x24, 0xc2,
	0xb5, 0xa7, 0x69, 0xc7, 0xb5, 0x50, 0x93, 0x66, 0xb3, 0xda, 0xad, 0x66, 0x75, 0xfb, 0x08, 0xae,
	0x5f, 0x7c, 0x9f, 0xe9, 0x4c, 0xda, 0x39, 0xfe, 0x0e, 0xba, 0xb3, 0x32, 0x29, 0xb8, 0xa6, 0x0d,
	0xac, 0x58, 0x97, 0x15, 0xca, 0x39, 0x6e, 0x6f, 0x02, 0x1b, 0x95, 0xf7, 0x86, 0xab, 0x13, 0x11,
	0x70, 0xf2, 0x07, 0xac, 0xcd, 0x77, 0x43, 0xb6, 0xca, 0x86, 0x2e, 0x7d, 0x1e, 0xf6, 0x6f, 0x7d,
	0xce, 0x76, 0xa3, 0xdb, 0xfe, 0xdf, 0x4b, 0x09, 0x5b, 0x21, 0x3f, 0x19, 0x8a, 0xf3, 0x3c, 0x11,
	0xe9, 0xb7, 0x7b, 0x4f, 0x9f, 0x0c, 0x35, 0x4b, 0xc3, 0xb1, 0xfc, 0x58, 0x64, 0x1e, 0x35, 0xfe,
	0x3a, 0x2c, 0xda, 0x08, 0x64, 0x32, 0xaa, 0xb8, 0xdd, 0x82, 0x1b, 0x29, 0xfe, 0x5e, 0x8a, 0x94,
	0xab, 0x5d, 0x96, 0xc9, 0x38, 0x96, 0xbb, 0x9a, 0xd9, 0x35, 0x19, 0xb1, 0x4c, 0x8c, 0xa6, 0x72,
	0xe4, 0x72, 0x7f, 0x72, 0x3f, 0x7e, 0x36, 0x1e, 0xaf, 0xe0, 0x53, 0xe5, 0xd9, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x72, 0xba, 0xb3, 0x94, 0x3c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RepositoryServiceClient is the client API for RepositoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RepositoryServiceClient interface {
	ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error)
}

type repositoryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRepositoryServiceClient(cc *grpc.ClientConn) RepositoryServiceClient {
	return &repositoryServiceClient{cc}
}

func (c *repositoryServiceClient) ListRepository(ctx context.Context, in *ListRepositoryRequest, opts ...grpc.CallOption) (*ListRepositoryResponse, error) {
	out := new(ListRepositoryResponse)
	err := c.cc.Invoke(ctx, "/github.RepositoryService/ListRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepositoryServiceServer is the server API for RepositoryService service.
type RepositoryServiceServer interface {
	ListRepository(context.Context, *ListRepositoryRequest) (*ListRepositoryResponse, error)
}

// UnimplementedRepositoryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRepositoryServiceServer struct {
}

func (*UnimplementedRepositoryServiceServer) ListRepository(ctx context.Context, req *ListRepositoryRequest) (*ListRepositoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepository not implemented")
}

func RegisterRepositoryServiceServer(s *grpc.Server, srv RepositoryServiceServer) {
	s.RegisterService(&_RepositoryService_serviceDesc, srv)
}

func _RepositoryService_ListRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepositoryServiceServer).ListRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.RepositoryService/ListRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepositoryServiceServer).ListRepository(ctx, req.(*ListRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RepositoryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.RepositoryService",
	HandlerType: (*RepositoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepository",
			Handler:    _RepositoryService_ListRepository_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repository.proto",
}
